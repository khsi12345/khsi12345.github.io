{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/styled_components_hover","webpackCompilationHash":"69e8aa3be0d810fce462","result":{"data":{"markdownRemark":{"id":"5571b562-7ffe-5184-80f1-c4c97c39d9c1","html":"<p>2차 프로젝트로 Stayfolio 라는 WEB을 클론 진행을 하게됬다.<br>\n내가 맡은 여러가지 중 PICK 페이지를 진행하는데 PICK 페이지는 각각의 ITEM들이 존재하는 페이지다.<br>\n먼저 이 ITEM을 컴포넌트로 만들것이다.<br>\nITEM을 보니 이미지가 들어가고 아이콘, 텍스트 그리고 애니메이션도 적용되어있다.</p>\n<p>이 블로그의 주제는 애니메이션 적용에 대한 경험이다.<br>\n이번 프로젝트에서는 scss가 아닌 styled-components를 사용했다.<br>\nstyled-components는 scss에 비해 css 적용하기 위한 종속관계를 그리기 힘들다.<br>\nscss는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span>example <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span>test <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 처럼 나타낼 수 있지만</p>\n<p>styled-components는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> example <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>컴포넌트 내 return 부분에서 JSX 문법으로 작성을하는데</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>example<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>test <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>example<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위처럼 한다.</p>\n<p>위 예시는 너무나도 간단해서 불편함을 알기 힘들지만 scss는 scss파일에서 각 식별자로 우선 순위를 주고 종속 관계도<br>\n나타낼 수 있고 html 요소는\n서로 동 떨어져있지만 식별자를 이용해서 스타일을 적용할 수 있다.<br>\n하지만 styled-components는 example ,test가 각각의 사용자 정의 태그고(html 태그 의미) html 구조에 맞게\n종속 관계를 그리다 보니 html 요소가 서로 동 떨어져 있을때 스타일을 연걸해서 적용할 수 없는 한계가 있었다.</p>\n<p>나에게 닥친 문제는 이미지 요소 그리고 이미지 요소와 겹쳐지는 또 다른 요소, 그리고 이 둘을 묶는 상위 요소가 존재하는데 둘을 묶는 상위 요소에 hover를 주고 hover 적용될 때 이미지에 scale transition 그리고 서로 겹쳐지는 각각의 요소에 opasity 속성, background-color: rgba() 속성 등을 적용해서 시각적인 변화를 보여내려 하는데, scss처럼 id 식별자나, className 식별자로 관계도를 그리고, 스타일 적용을 할 수 없다보니 styled-components에서 각각의 정의한 태그에 hover를 줬었는데.. 제대로 작동하지 않았다.<br>\n그래서 조금의 JavaScript적인 생각을 해서 둘을 묶고 있는 상위 요소의 태그를 변수로서 사용해서 변화를 줘야하는 각 태그에다가 상위 요소 태그를 변수로 주고 hover를 주니 제대로 작동했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>ItemImgWrap<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>ItemImgContainer<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ItemImg src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>img<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ItemImgContainer<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>ItemTextWrap<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ItemText<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>Icon className<span class=\"token operator\">=</span><span class=\"token string\">\"fas fa-search\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token constant\">VIEW</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ItemText<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ItemTextWrap<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ItemImgWrap<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ItemImgWrap <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  position: relative;\n  overflow: hidden;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ItemImgContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  width: 100%;\n  overflow: hidden;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ItemImg <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>img<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  width: 100%;\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.4, 0.95);\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ItemImgWrap<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:hover &amp; {\n    transform: scale(1.2, 1.2);\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ItemTextWrap <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  bottom: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  text-align: center;\n  opacity: 0;\n  cursor: pointer;\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ItemImgWrap<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:hover &amp; {\n    opacity: 1;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 관계도를 보면 각각의 태그들은 사용자 정의 태그이다.(컴포넌트라 부름)<br>\nstyled-components는 스타일 적용을 위 처럼 정의하다보니 종속 관계를 scss처럼 할 수 없다.<br>\n그래서 스타일 상속 및 종속은 정의 윗 부분에 있는 태그 관계도에서 이뤄진다.<br>\n그렇다고 스타일 종속관계를 위해.. 태그 관계도를 난장판으로 만들 수 없고 말이다..<br>\n그래서 ItemImg와 ItemTextWrap을 포함하고 있는 ItemImgWrap 컴포넌트를 각 컴포넌트에서 변수처럼 사용하고 :hover 적용했다.</p>","fields":{"slug":"/posts/styled_components_hover","tagSlugs":["/tag/css/"]},"frontmatter":{"date":"2019-09-17","description":"styled-components를 사용하면서 hover를 사용할때에 대한 글","tags":["css"],"title":"styled-components에서 hover 사용하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/styled_components_hover"}}}