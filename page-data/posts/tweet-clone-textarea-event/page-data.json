{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/tweet-clone-textarea-event/","webpackCompilationHash":"db383d23c6be2981d8bc","result":{"data":{"markdownRemark":{"id":"1e10048e-b0ae-59f8-949f-8741d18dcd26","html":"<p>작성을 텍스트 위주로 해서 전체 코드를 <a href=\"https://github.com/khsi12345/miniter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/khsi12345/miniter</a> 에서 확인해주세요~</p>\n<p>전체적인 코드와 글을 같이 보면 좋습니다.</p>\n<ol>\n<li>textarea 요소 dom 객체에 접근하기 위해서 js 파일에서 document.querySelector(’. textBox’)를</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> textArea <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".textBox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>textarea dom에 접근할 수 있게 됐으니 이벤트를 걸어줄 수 있게 됐다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">textArea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"event option\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이벤트가 발생할 때까지 감시하고 있어줄 addEventListener!</p>\n<p>이벤트가 발생할때 까지 감시하고 있기는 하는데~~ 어떤 이벤트인지 알아야 하니까 1번째 인자로 이벤트 옵션을 설정해준다.</p>\n<p>(이벤트가 발생될 때까지 감시하고 있다가 설정해준 이벤트가 발생하면 감지하고 실행한다.)</p>\n<p>이벤트가 발생했을 때 2번째 인자로 주어지는 로직을 실행한다.(비동기)</p>\n<p>3.textarea는 입력창이니까 사용자가 키보드를 사용할 거야, 그럼 키보드 관련 이벤트를 걸어줘야겠지?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">textArea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keyup\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>키보드 옵션이 keyup, keydown, keypress 있는데 keyup을 설정해줬다.</p>\n<p>keyup은 키보드를 눌렀다 땠을 때의 이벤트</p>\n<ol start=\"4\">\n<li>이제 이벤트가 발생했고, 2번째 인자로 실행될 로직을 만들어보자.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">textArea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// console.log(e)</span></code></pre></div>\n<p>함수의 인자로 해당 dom 객체에서 발생한 이벤트 객체를 받아 올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> maxContentsOfTextArea<span class=\"token punctuation\">)</span>\n  curContents<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 로직은 입력한 글자의 수를 뷰에 표현</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> maxContentsOfTextArea<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//이벤트 옵션이 keyup 일 때</span>\n\n  <span class=\"token comment\">// console.log(contents.slice(0, maxContentsOfTextArea))</span>\n\n  <span class=\"token comment\">// e.target.value = contents.slice(0, maxContentsOfTextArea);</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 로직은 입력한 글자의 수가 최대 글자의 수와 같아져도 textarea에 계속 입력할 수 있다.(최대 글자 수를 오버해서 입력이 되는 문제 발생…)</p>\n<p>그래서 입력한 글자의 수가 최대 글자의 수와 같아지거나, 길어질 때 최대 글자 수까지만 view에 표현하기 위한 로직이다.</p>\n<p>위 초록색 로직으로 작성한 이유는 keyup 이벤트 때문이다.</p>\n<p>(이미 키를 눌렀다 떼서 이벤트가 발생한 시점으로 event.preventDefault()가 먹히지 않는다.)</p>\n<p>다르게도 로직을 작성해봤다. (아래 로직)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">textArea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// console.log(e)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> maxContentsOfTextArea<span class=\"token punctuation\">)</span>\n    curContents<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> maxContentsOfTextArea<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//이벤트 옵션이 keydown 일 때</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">!==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>keyup 이벤트 옵션을 keydown으로 변경해주었다.</p>\n<p>keydown은 키를 누를 때 이벤트가 발생해서 event.preventDefault()가 먹힌다.</p>\n<p><strong>하지만 문자를 입력하면 최대 글자 수를 오버해서 계속 입력이 된다…(해결하려고 삽질을 했지만 결국 실패)</strong></p>\n<p>또 다른 문제 입력한 문자의 수와 뷰에 표시되는 숫자가 다르다…(이것도 실패)</p>\n<p>백스페이스 키가 먹히지 않는다.</p>\n<p>그래서 if 조건문으로 백스페이스는 예외 적용을 해주었다.(잘 먹힌다..)</p>","fields":{"slug":"/posts/tweet-clone-textarea-event/","tagSlugs":["/tag/javascript/","/tag/dom/","/tag/event/"]},"frontmatter":{"date":"2019-08-12","description":"트위터 클론을 진행에 대한 글.","tags":["javascript","dom","event"],"title":"트위터 클론 중 textarea 최대 글자 수 제한 이벤트"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/tweet-clone-textarea-event/"}}}