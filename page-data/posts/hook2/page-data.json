{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/hook2","webpackCompilationHash":"da50defbc6b65dfd6504","result":{"data":{"markdownRemark":{"id":"90505dce-e5e2-5eb6-bed0-7bf11f461d19","html":"<p>이전 글에서는 Hook이 왜 세상에 나오게 됬는지에 대한 글이었다.<br>\n이 글에서는 Hook의 기능에 대해 작성하고자 한다.</p>\n<p>Hook은 class 안에서 사용할 수 없다.<br>\n함수형 컴포넌트에서 상태 관련 로직(state, lifecycle 등)을 사용할 수 있게 해주는 역할을 하는 녀석일 뿐이다.<br>\nHook은 useState, useEffect, useCallback 등 네이밍이 use로 시작한다.</p>\n<h4 id=\"usestate\"><a href=\"#usestate\" aria-label=\"usestate permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'seong ho'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 class 컴포넌트, 함수형 컴포넌트로 변환하고 Hook을 사용하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>초기값<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seong ho\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Hook 중에 useState는 위 처럼 사용한다.<br>\n위 변수는 일반 변수와는 달리 state 변수이다.<br>\n일반 변수(지역 변수)는 함수가 끝나면 사라지지만 state 변수는 react에 의해 사라지지 않는다.<br>\n그런데 왜 변수 선언을 [name, setName] 이런식으로 했을까??<br>\n그전에 useState() 라는 녀석을 알아야 한다.<br>\nuseState() 녀석은 state 변수와 state 변수를 갱신할 수 있는 함수를 반환한다.<br>\n따라서 이 2개의 반환 값을 할당하기 위해 배열 구조 분해라는 자바스크립트의 문법을 사용한 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fruitStateVariable <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 두 개의 아이템이 있는 쌍을 반환</span>\n<span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 번째 아이템</span>\n<span class=\"token keyword\">var</span> setFruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 두 번째 아이템</span></code></pre></div>\n<p>배열 구조 분해 문법을 사용하지 않으면 이런식으로 …</p>\n<p>또한 여러 개의 state 변수를 선언할 수 있다.</p>\n<h4 id=\"useeffect\"><a href=\"#useeffect\" aria-label=\"useeffect permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 class 컴포넌트, 함수형 컴포넌트로 변환하고 Hook을 사용하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>클래스형 컴포넌트에서 lifecycle 메서드들 중에 componentDidMount, componentDidUpdate, componentWillUnmount를 useEffect Hook으로..</p>\n<p>클래스형 컴포넌트에서는 같은 기능 단위의 로직이더라도 lifecycle에 따라 나뉘어지고, 다른 기능 단위의 로직인데\n같은 lifecycle에서 섞여 사용되기도 하는 등 함수형 컴포넌트에서 Hook을 사용하면 lifecycle에 따라 나누지 않고 같은 기능<br>\n단위의 로직끼리 묶어 분할할 수 있다.</p>\n<p>컴포넌트 안에서 useEffect도 여러 번 사용할 수 있다.</p>\n<p>componentWillUnmount로 종료할 기능이 있다면 useEffect에서 return해주면된다.<br>\n(return에 componentWillUnmount에 작성할 코드를 작성)<br>\nuseEffect에 두번째 인자로 빈 배열을 주거나, 아무거도 주지 않는다면 딱 componentDidMount처럼 동작<br>\nuseEffect에 두번째 인자로(무조건 array로) set해서 변경되는 state 변수를 주면 componentDidMount, componentDidUpdate처럼 동작</p>\n<p>Hook은 두 가지의 절대적인 규칙이 있다.</p>\n<ol>\n<li>반복문, 조건문 혹은 중첩된 함수 내에서 Hook을 호출하지 마세요.<br>\n=> 필요하다면 Hook 안에서 조건문 사용.<br>\n=> Hook은 항상 react 함수 내의 최상위 레벨에서 호출해야 합니다.<br>\n=> 이 규칙을 따르면 컴포넌트가 렌더링 될 때마다 항상 동일한 순서로 Hook이 호출되는 것이 보장됩니다.<br>\n=> 이러한 규칙은 react가 useState와 useEffect가 여러 번 호출되는 중에도 Hook의 상태를 올바르게 유지할 수 있도록 해줍니다.</li>\n<li>react 함수 내에서 Hook을 호출해야 합니다.<br>\n=>일반적인 javascript 함수에서 호출하지 마세요.<br>\n=>react 함수 컴포넌트에서 Hook을 호출하세요.</li>\n</ol>\n<p>위 규칙들을 강제하는 eslint-plugin-react-hooks라는 ESLint 플러그인을 출시했습니다.</p>","fields":{"slug":"/posts/hook2","tagSlugs":["/tag/react/","/tag/hooks/"]},"frontmatter":{"date":"2019-09-14","description":"Hook에 대한 글","tags":["react","hooks"],"title":"Hook2"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/hook2"}}}