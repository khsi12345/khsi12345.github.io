{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react3/","webpackCompilationHash":"78b54420007cd4bfe4f5","result":{"data":{"markdownRemark":{"id":"21da11ed-cd5c-5fd2-a429-5f0b38f0463f","html":"<h2 id=\"react에서-event-data를-사용해보며\"><a href=\"#react%EC%97%90%EC%84%9C-event-data%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EB%A9%B0\" aria-label=\"react에서 event data를 사용해보며 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react에서 event, data를 사용해보며</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">handleInputEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      email<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleInputPw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      pw<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>input\n    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n    placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Phone, email, or username\"</span>\n    className<span class=\"token operator\">=</span><span class=\"token string\">\"inputEmail\"</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputEmail<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>input\n    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n    placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Password\"</span>\n    className<span class=\"token operator\">=</span><span class=\"token string\">\"inputPw\"</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputPw<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>위와 같이 이벤트 핸들러가 같은 동작을 할 경우 처음엔 각각의 input 요소<br>\n그리고 state인 email과 pw로 인해 1개의 이벤트 핸들러에서는 email state를,<br>\n다른 1개의 이벤트 핸들러에서는 pw state를 다뤘다.<br>\n하지만 갱신해줘야하는 데이터(입력요소의 값)를 받을 대상이 다를 뿐이지 결국에는<br>\n데이터를 가지고 갱신하는 일은 같은 것이다.</p>\n<p>위 코드를 이렇게 수정할 수 있겠다.<br>\n2개의 이벤트 핸들러를 1개로 줄이고 각각의 input 요소에서 사용할 수 있게한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">handleInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>input\n    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n    placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Phone, email, or username\"</span>\n    className<span class=\"token operator\">=</span><span class=\"token string\">\"inputEmail\"</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInput<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>input\n    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n    name<span class=\"token operator\">=</span>\"pw\n    placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Password\"</span>\n    className<span class=\"token operator\">=</span><span class=\"token string\">\"inputPw\"</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInput<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>어떻게 이런게 가능한 것일까??<br>\n이벤트 핸들러는 이벤트 객체를 받을 수 있는데 그 이벤트 객체는 이벤트를 일으킨<br>\n요소다.<br>\n즉 해당 요소에서 이벤트가 발생하면 <code class=\"language-text\">[e.target.name]</code>은 name을 email 또는<br>\npw 구분한다.<br>\nname이 email인 요소면 <code class=\"language-text\">email: e.target.value</code>가 되는것이고<br>\nname이 pw인 요소면 <code class=\"language-text\">pw:e.gartget.value</code>가 되는것이다.</p>\n<p>중복을 줄일 수 있는 정말 좋은 방법이다!</p>","fields":{"slug":"/posts/react3/","tagSlugs":["/tag/react/","/tag/event/"]},"frontmatter":{"date":"2019-08-18","description":"REACT를 배움, 공부.","tags":["react","event"],"title":"REACT ing2"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react3/"}}}