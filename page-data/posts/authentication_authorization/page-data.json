{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/authentication_authorization/","webpackCompilationHash":"bc0f1ffc47d365a501cb","result":{"data":{"markdownRemark":{"id":"f97f0bc0-91cd-53c7-91f3-40245b75e822","html":"<h2 id=\"인증인가\"><a href=\"#%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80\" aria-label=\"인증인가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증&#x26;인가</h2>\n<p>인증과 인가는 API에서 가장 자주 구현되는 기능 중 하나.<br>\nprivate한 api는 물론이고 public한 api도 기본적인 인증과 인가를 요구한다.</p>\n<h4 id=\"인증\"><a href=\"#%EC%9D%B8%EC%A6%9D\" aria-label=\"인증 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증</h4>\n<p>인증은 유저를 식별하고 확인하는 절차다.<br>\n프론트엔드에서 인증하는 기능 중 대표적인것은 로그인이나 회원가입 할 때 유저의 정보를 확인하는 것이다.</p>\n<h4 id=\"인가\"><a href=\"#%EC%9D%B8%EA%B0%80\" aria-label=\"인가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인가</h4>\n<p>유저가 요청하는 것을 실행할 수 있는 권한이 있는 유저인가 없는 유저인가를 확인하는 절차.</p>\n<h4 id=\"jwtjson-web-tokens\"><a href=\"#jwtjson-web-tokens\" aria-label=\"jwtjson web tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT(JSON Web Tokens)</h4>\n<p>먼저 JWT에 대해 작성하기 전에 HTTP의 특징을 짚고 나서 JWT를 작성하고자 한다.<br>\nHTTP로 클라이언트와 서버가 12시에 통신하고나서 12시 2분에 다시 통신하할때 12시에 통신한것과 12시 2분에 통신하는것은 각각 독립적(이전의 상태를 알 수 없다.)<br>\n쉽게 풀어보자면 12시에 로그인을 했는데 로그인 한 상태에서 12시 2분에 클라이언트가 서버에 요청을 하면서 HTTP로 통신이 이뤄지지만<br>\n12시 2분에 요청한 정보가 12시에 로그인을 한(했던) 유저인지 아닌지 알 수 없다.<br>\n그렇다면 12에 로그인 했던 유저라고(로그인 했던 유저라는 정보) 서버에게 알려주기 위해 request에 담아 전송해줘야 한다.(요청할때마다)<br>\n이러한 비효율적인 부분을 보완하고자 서버에게 동일한 정보를 토큰형태로 받아서 쿠키, 로컬스토리지 등 저장소에 저장해뒀다가<br>\n서버에 요청할 때 저장한 곳에서 토큰을 꺼내어 request에 담아 보낸다.</p>\n<p>위 글에서 밑 부분이 바로 JWT다.<br>\n동일한 정보, 상태를 서버에게 보낼 때 정보, 상태를 담고 있는 토큰을 request에 담아 보낸다.<br>\n이 토큰은 최초에 서버가 클라이언트에게 생성한 후 보내준다.</p>","fields":{"slug":"/posts/authentication_authorization/","tagSlugs":["/tag/인증/","/tag/인가/"]},"frontmatter":{"date":"2019-08-30","description":"인증&인가에 대한 글 ","tags":["인증","인가"],"title":"인증 & 인가"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/authentication_authorization/"}}}