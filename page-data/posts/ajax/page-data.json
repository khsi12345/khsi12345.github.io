{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/ajax","webpackCompilationHash":"1f4e4b6c119e53a9a85f","result":{"data":{"markdownRemark":{"id":"c89133fb-b8bf-58fc-9e61-610e9cfe30db","html":"<p>자바스크립트를 이용해서 비동기적으로 서버와 브라우저가 데이터를 교환할 수 있는 통신방식.<br>\n서버로부터 웹 페이지가 반환되면 화면 전체를 갱신 하는데 페이지 일부만 갱신하고도 동일한 효과를 볼 수 있도록 하는 것.\n페이지 전체를 rendering 할 필요가 없고 갱신이 필요한 일부만 갱신하면 되므로 빠른 성능과 부드러운 사용자 경험의 이점이 있다.</p>\n<p>브라우저는 XMLHttpRequest 객체를 이용하여 Ajax 요청을 생성하고 전송한다.<br>\n서버가 브라우저의 요청에 대해 응답을 반환하면 같은 XMLHttpRequest 객체가 결과를 처리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// XMLHttpRequest 객체의 생성</span>\n<span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 비동기 방식으로 Request를 오픈한다</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Request를 전송한다</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 브라우저와 서버가 통신 하기위해 ajax 요청을 생성하고 전송하는 것.</p>\n<p>send의 인수로 서버로 전송할 데이터를 줄 수 있는데<br>\nmethod가 GET이면 send의 인수는 무시되고, POST면 request body에 담아 전송할 인수를 전달할 수 있다.</p>\n<p>setRequestHeader 메소드는 HTTP Request Header의 값을 설정하는데, 반드시 open 메소드 호출 이후에 호출한다.<br>\n자주 사용하는 Request Header는 Content-type과 Accept가 있다.</p>\n<p>Content-type은 Request body에 담아 전송할 데이터의 MIME-type의 정보를 표현한다.</p>\n<p>MIME-type는 다음 3가지가 있다.<br>\ntext : text/plain, text/html, text/css, text/javascript<br>\nApplication : application/json, application/x-www-form-urlencode<br>\nFile : multipart/formed-data</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// json으로 전송하는 경우</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클라이언트가 서버로 전송할 데이터의 MIME-type 지정: json</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Park\"</span><span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Accept는 HTTP 클라이언트가 서버에 요청할 때 서버가 센드백할 데이터의 MIME-type으로 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 서버가 센드백할 데이터의 MIME-type 지정: json</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// XMLHttpRequest 객체의 생성</span>\n<span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 비동기 방식으로 Request를 오픈한다</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data/test.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Request를 전송한다</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// XMLHttpRequest.readyState 프로퍼티가 변경(이벤트 발생)될 때마다 콜백함수(이벤트 핸들러)를 호출한다.</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이 함수는 Response가 클라이언트에 도달하면 호출된다.</span>\n\n  <span class=\"token comment\">// readyStates는 XMLHttpRequest의 상태(state)를 반환</span>\n  <span class=\"token comment\">// readyState: 4 => DONE(서버 응답 완료)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// status는 response 상태 코드를 반환 : 200 => 정상 응답</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>XMLHttpRequest의 readyState가 4인 경우, 서버 응답이 완료된 상태이므로 이후 XMLHttpRequest.status가 200(정상 응답)임을 확인하고 정상인 경우, XMLHttpRequest.responseText를 취득한다.<br>\nXMLHttpRequest.responseText에는 서버가 전송한 데이터가 담겨 있다.</p>","fields":{"slug":"/posts/ajax","tagSlugs":["/tag/비동기/"]},"frontmatter":{"date":"2019-10-30","description":"AJAX에 대한 글 작성","tags":["비동기"],"title":"AJAX"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/ajax"}}}