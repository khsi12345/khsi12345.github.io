{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/project-code","webpackCompilationHash":"aaf3023d1b1dacafd5c0","result":{"data":{"markdownRemark":{"id":"50a32b5a-6a31-533b-86c7-4f9807a347f6","html":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 해당 프로젝트는 Hook(함수형 컴포넌트)을 사용하여 개발했습니다.\n * Hook(함수형 컴포넌트)을 사용한 이유는 컴포넌트 구성 요소 계층의 복잡함을 최소화하기 위함입니다.\n * 또한 컴포넌트 구성 요소 계층의 구조를 변경하지 않고도 상태 저장을 재사용할 수 있습니다.\n * 절대경로를 설정해 import 할 때 가독성을 향상시켰습니다.\n * 여러 컴포넌트에서 중복적으로 사용되는 함수들은 util 폴더로 분리하여 작성했습니다.(함수의 재사용을 위함입니다.)\n * 해당 컴포넌트는 백 오피스의 템플릿 관리 기능 중 상품정보제공고시 템플릿 등록을 하는 컴포넌트입니다.\n * html은 div 태그로 레이아웃을 최대한 구분하고, label, img, select, option, input 태그를 시멘틱하게 사용했습니다.\n */</span>\n\n함수형 컴포넌트로 setState 기능을 하는 useState를 사용하기 위해 <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n해당 컴포넌트는 routes<span class=\"token punctuation\">.</span>js에서 Router의 자식으로 존재하지 않기때문에 props로 history를 받을 수 없었고<span class=\"token punctuation\">,</span>\nhistory를 사용하기 위해 <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HOC</span><span class=\"token punctuation\">)</span>로 컴포넌트를 감싸 props로 history를 받았습니다<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter<span class=\"token punctuation\">,</span> RouteComponentProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n해당 컴포넌트에서 받는 data의 타입을 models 폴더에 <span class=\"token function\">정의</span><span class=\"token punctuation\">(</span>models 폴더에서 <span class=\"token keyword\">interface</span> 타입 정의<span class=\"token punctuation\">,</span> 관리<span class=\"token punctuation\">)</span>\n타입 정의를 models 폴더에 분리한 이유는 타입 정의한 것에 대해 한번에 파악하기 쉬워 관리하기 쉽고<span class=\"token punctuation\">,</span>\n유지보수하기에도 편리하기 때문입니다<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Props <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"models/Md_EnrollmentProductInfoNotice\"</span><span class=\"token punctuation\">;</span>\n\n서버와 통신하는 로직을 util<span class=\"token operator\">/</span>service에 정의하고 해당 컴포넌트에서 <span class=\"token keyword\">import</span> 했습니다<span class=\"token punctuation\">.</span>\n많은 컴포넌트에서 서버와 통신하는 로직을 필요로하는 데 컴포넌트마다 로직을 작성하면 중복되고<span class=\"token punctuation\">,</span>\n유지보수 하기 힘들기 때문에 util<span class=\"token operator\">/</span>service에 정의하여\n재사용성과 유지보수를 해결했습니다<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  enrollmentTemplate<span class=\"token punctuation\">,</span>\n  getProductInfoNotiFormList<span class=\"token punctuation\">,</span>\n  getToken\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"util/service\"</span><span class=\"token punctuation\">;</span>\n\n사용자가 Form에 입력한 값에 대한 유효성 검사하는 함수 <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> validateProductInfoTemplateFormInput <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"util/templateValidation\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> config <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../env-config\"</span><span class=\"token punctuation\">;</span>\n\n해당 컴포넌트에 필요한 모든 form 요소를 컴포넌트화 했습니다<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">import</span> AllForm <span class=\"token keyword\">from</span> <span class=\"token string\">\"components/AllForm\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> CancleButton <span class=\"token keyword\">from</span> <span class=\"token string\">\"components/CancleButton\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ConfirmButton <span class=\"token keyword\">from</span> <span class=\"token string\">\"components/ConfirmButton\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"styles/product_info_notice.scss\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> notice2 <span class=\"token keyword\">from</span> <span class=\"token string\">\"images/ic-notice-red.png\"</span><span class=\"token punctuation\">;</span>\n\n해당 컴포넌트에서 data를 받기 때문에 data의 타입을 불러와 React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span>로 타입을 정의했습니다<span class=\"token punctuation\">.</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>RouteComponentProps<span class=\"token operator\">></span>는 해당 컴포넌트에서 withRouter 그리고 history를 사용하기 위해 타입을 정의했습니다<span class=\"token punctuation\">.</span>\n해당 컴포넌트에서 props 대신에 <span class=\"token punctuation\">{</span>history<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">}</span>로 받은 이유는 어떤 매개변수를 받는지 한 눈에 파악할 수 있게 하기 위함입니다<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">const</span> EnrollmentProductInfoNoticeTemplate<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>\n  Props <span class=\"token operator\">&amp;</span> RouteComponentProps\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> history<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  템플릿 네임<span class=\"token punctuation\">,</span> 변수명 그대로 템플릿 이름을 값으로 받는 변수입니다<span class=\"token punctuation\">.</span>\n  초기 값을 빈 문자열로 준 이유는 해당 변수를 가지고 유효성 체크를 하는데<span class=\"token punctuation\">,</span> 이때 값의 길이가 존재해야하고<span class=\"token punctuation\">,</span>\n  타입이 string이기 때문입니다<span class=\"token punctuation\">.</span>\n  빈 문자열을 주지 않으면 <span class=\"token keyword\">undefined</span>로 문제가 발생합니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>templateName<span class=\"token punctuation\">,</span> setTemplateName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  기본 템플릿<span class=\"token punctuation\">,</span> 해당 템플릿을 기본 템플릿으로 설정 하는지 안하는지를 값으로 받는 변수입니다<span class=\"token punctuation\">.</span>\n  기본 값을 <span class=\"token boolean\">false</span>로 줬습니다<span class=\"token punctuation\">.</span> 사용자가 체크해야 기본 템플릿으로 설정할 수 있게 하기 위해서 입니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isDefault<span class=\"token punctuation\">,</span> setIsDefault<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  상품군 목록이 존재합니다<span class=\"token punctuation\">.</span> 상품군 목록을 선택해야만 해당 상품군에 맞는 form들이 사용자에게 표시되기 때문에\n  상품군을 선택하지 않으면 선택하라는 경고 텍스트를 보여주기 위한 변수입니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pleaseSelectProduct<span class=\"token punctuation\">,</span> setPleaseSelectProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  상품군을 선택하면 상품군에 맞는 form data들을 받는 변수입니다<span class=\"token punctuation\">.</span>\n  해당 변수는 AllFrom 컴포넌트에 prop으로 넘겨줍니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>productFormList<span class=\"token punctuation\">,</span> setProductFormList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  변수명을 dataJson으로 한 이유는 data의 타입이 object이고 이 데이터는 서버로부터 받은 상품군 리스트를 map을 돌리고\n  Object<span class=\"token punctuation\">.</span>assign을 사용해 키와 값을 초기화합니다<span class=\"token punctuation\">.</span> Object<span class=\"token punctuation\">.</span>assign을 사용하기 위해 기본 값으로 빈 객체를 줬습니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataJson<span class=\"token punctuation\">,</span> setDataJson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  AllForm 컴포넌트에서 사용자의 입력 값을 받아 최신화 된 데이터를 받는 변수입니다<span class=\"token punctuation\">.</span>\n  가장 최신화 된 데이터를 받기 때문에 변수명을 getLastDataJson으로 했습니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>getLastDataJson<span class=\"token punctuation\">,</span> lastDataJson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  테플릿 이름의 최대 길이수를 <span class=\"token number\">30</span>자로 정한 변수입니다<span class=\"token punctuation\">.</span>\n  고정 값이고 재할당을 하지 않기 때문에 상수로 했습니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">TEMPLATENAMEMAXLENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n  사용자가 템플릿 이름을 작성할 때 발생하는 이벤트 핸들러입니다<span class=\"token punctuation\">.</span>\n  onChange로부터 event를 받기 때문에 React<span class=\"token punctuation\">.</span>ChangeEvent 그리고 <span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span> 타입을 정의했습니다<span class=\"token punctuation\">.</span>\n  템플릿 이름의 길이가 <span class=\"token number\">30</span>보다 작을 때는 입력한 값이 계속 반영되어야하고<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span>와 같아지면 <span class=\"token number\">30</span>까지 입력한 값이\n  반영되어야 하기 때문에 <span class=\"token keyword\">if</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span>로 분기처리 했습니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">templateNameContent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    사용자가 입력한 값의 길이가 <span class=\"token number\">30</span>자 보다 작을 때 templateName 변수에 입력한 값을 계속 업데이트 해줍니다<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token constant\">TEMPLATENAMEMAXLENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTemplateName</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    반면 사용자가 입력한 값의 길이가 <span class=\"token number\">30</span>자와 같아지면 templateName 변수에 최대 <span class=\"token number\">30</span>자까지의 값만을 업데이트 해줍니다<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token constant\">TEMPLATENAMEMAXLENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTemplateName</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TEMPLATENAMEMAXLENGTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleDefaultTemplate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsDefault</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDefault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  상품군 리스트를 클릭하면 발생하는 이벤트 핸들러입니다<span class=\"token punctuation\">.</span>\n  핸들러 내부에 비동기 함수가 있어<span class=\"token punctuation\">,</span> 예상치 못한 오작동을 방지하기 위해 <span class=\"token keyword\">async</span> <span class=\"token keyword\">await</span>로 동기화 해줬습니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectProduct</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ChangeEvent<span class=\"token operator\">&lt;</span>HTMLSelectElement<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> productItemNumber <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n    이 이벤트 핸들러 함수 안에서 서버와 통신하는 이유는 사용자가 상품군을 클릭했을 때 Form들을 보여줘야하기 때문에\n    해당 이벤트 핸들러가 실행되면 서버와 통신하게끔 작성했습니다<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">getProductInfoNotiFormList</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>config<span class=\"token punctuation\">.</span>partnerAPI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/product-information-notices/form/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>productItemNumber<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      setProductFormList<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>jwt_token\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">setDataJson</span><span class=\"token punctuation\">(</span>\n            서버로 보내야 하는 데이터의 타입이 객체이고\n            Object<span class=\"token punctuation\">.</span>assign을 사용한 이유는 불변성을 유지하기 위해서 그리고 기존 객체에 새로운 키와 값을\n            추가 하기 위해서 입니다<span class=\"token punctuation\">.</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>dataJson<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n              productInformationNoticeNumber<span class=\"token punctuation\">:</span>\n                ele<span class=\"token punctuation\">.</span>productInformationNoticeNumber<span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span>ele<span class=\"token punctuation\">.</span>fieldName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  사용자가 입력한 값에 대한 이벤트 핸들러는 AllForm 컴포넌트에 존재합니다<span class=\"token punctuation\">.</span>\n  AllForm 컴포넌트에서 dataJson가 업데이트 될 때마다 최신의 dataJson을 가지고 옵니다<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLastDataJsonForAllForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">lastDataJson</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">confirmButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    서버에 보낼 data를 Json 문자열로 변환합니다<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> templateName<span class=\"token punctuation\">,</span>\n      isDefault<span class=\"token punctuation\">:</span> isDefault<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>getLastDataJson\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> 조건문을 사용하여 사용자가 form에 입력을 제대로 했는지 확인하는 유효성 검사입니다<span class=\"token punctuation\">.</span>\n    필수 입력 항목을 모두 입력했을 때 템플릿이 등록되어야 하기 때문에 이렇게 작성했습니다<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validateProductInfoTemplateFormInput</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">enrollmentTemplate</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>config<span class=\"token punctuation\">.</span>partnerAPI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/product-information-notice-templates</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>jwt_token\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          정상적으로 등록이 완료되면 상품정보제공고시 템플릿을 관리하면 페이지로 이동합니다<span class=\"token punctuation\">.</span>\n          실패했을 때 이동되면 안되기에 서버에서 주는 response의 상태 값을 체크하여 <span class=\"token number\">200</span>일 때 이동되게 작성했습니다<span class=\"token punctuation\">.</span>\n          history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"partner-templatemanagements-product-info-notice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"product-info-notice-template\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>상품정보제공고시 템플릿<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"flex\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"template-name\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"template-name\"</span><span class=\"token operator\">></span>\n              템플릿 이름\n              <span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span><span class=\"token string\">\"required\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>필수<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"table\"</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>input\n                type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n                id<span class=\"token operator\">=</span><span class=\"token string\">\"template-name\"</span>\n                value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>templateName<span class=\"token punctuation\">}</span>\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>templateNameContent<span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>templateName<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"notice2\"</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notice2<span class=\"token punctuation\">}</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"필수 입력 정보 경고 이미지\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>필수 입력 정보입니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"name-length-max\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>templateName<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">TEMPLATENAMEMAXLENGTH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"flex\"</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"default-template-select\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label\n                  htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"default-template-select\"</span>\n                  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleDefaultTemplate<span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isDefault <span class=\"token operator\">?</span> <span class=\"token string\">\"checked\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                    기본 템플릿으로 저장\n                  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"flex\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"product-list\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"product-list\"</span><span class=\"token operator\">></span>\n              상품군\n              <span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span><span class=\"token string\">\"required\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>필수<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"table\"</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"product-list\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>selectProduct<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>option<span class=\"token operator\">></span>상품군을 선택해주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>data\n                  <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token operator\">&lt;</span>option\n                          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ele<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span>\n                          data<span class=\"token operator\">-</span>id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ele<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span>\n                          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ele<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span>\n                        <span class=\"token operator\">></span>\n                          <span class=\"token punctuation\">{</span>ele<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n                        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>pleaseSelectProduct <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"notice2\"</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notice2<span class=\"token punctuation\">}</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"필수 입력 정보 경고 이미지\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>상품군을 꼭 선택해주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"\"</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          특정 상품군에 맞는 Form들을 화면에 보여주기 위해 필요한 컴포넌트입니다<span class=\"token punctuation\">.</span>\n          컴포넌트에 필요한 state들을 prop으로 넘겨줍니다<span class=\"token punctuation\">.</span>\n          이렇게 작성한 이유는 state들을 해당 컴포넌트에서 유지 및 관리하는데 AllForm 컴포넌트에서도 필요하기 때문입니다<span class=\"token punctuation\">.</span>\n          <span class=\"token operator\">&lt;</span>AllForm\n            templateName<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>templateName<span class=\"token punctuation\">}</span>\n            isDefault<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isDefault<span class=\"token punctuation\">}</span>\n            productFormList<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>productFormList<span class=\"token punctuation\">}</span>\n            dataJson<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataJson<span class=\"token punctuation\">}</span>\n            getLastDataJson<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>getLastDataJsonForAllForm<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"button-box\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/partner-templatemanagements-product-info-notice\"</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>CancleButton <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>ConfirmButton confirmClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>confirmButtonClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nEnrollmentProductInfoNoticeTemplate 컴포넌트에 props로 history를 넘겨주기 위해 withRouter를 사용했습니다<span class=\"token punctuation\">.</span>\n다른 컴포넌트로부터 porps로 history를 받을 수 있다고해도<span class=\"token punctuation\">,</span> withRouter로 직관적으로 사용하는게 유지보수 측면이나\n가독성 측면에서 좋다고 생각합니다<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>EnrollmentProductInfoNoticeTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/project-code","tagSlugs":["/tag/code/"]},"frontmatter":{"date":"2020-01-22","description":"프로젝트 코드 설명 글 작성","tags":["CODE"],"title":"프로젝트 소스 코드"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/project-code"}}}