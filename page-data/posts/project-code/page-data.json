{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/project-code","webpackCompilationHash":"cc4db95dd9ad2d0bf780","result":{"data":{"markdownRemark":{"id":"50a32b5a-6a31-533b-86c7-4f9807a347f6","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/**\n * 해당 프로젝트는 Hook(함수형 컴포넌트)을 사용하여 개발했습니다.\n * Hook(함수형 컴포넌트)을 사용한 이유는 컴포넌트 구성 요소 계층의 복잡함을 최소화하기 위함입니다.\n * 또한 컴포넌트 구성 요소 계층의 구조를 변경하지 않고도 상태 저장을 재사용할 수 있습니다.\n * 절대경로를 설정해 import 할 때 가독성을 향상시켰습니다.\n * 여러 컴포넌트에서 중복적으로 사용되는 함수들은 util 폴더로 분리하여 작성했습니다.(함수의 재사용을 위함입니다.)\n * 해당 컴포넌트는 백 오피스의 템플릿 관리 기능 중 상품정보제공고시 템플릿 등록을 하는 컴포넌트입니다.\n * html은 div 태그로 레이아웃을 최대한 구분하고, label, img, select, option, input 태그를 시멘틱하게 사용했습니다.\n */\n\n//함수형 컴포넌트로 setState 기능을 하는 useState를 사용하기 위해 import.\nimport React, { useState } from &#39;react&#39;;\n//해당 컴포넌트는 routes.js에서 Router의 자식으로 존재하지 않기때문에 props로 history를 받을 수 없었고,\n//history를 사용하기 위해 withRouter(HOC)로 컴포넌트를 감싸 props로 history를 받았습니다.\nimport { withRouter, RouteComponentProps } from &#39;react-router&#39;;\nimport { Link } from &#39;react-router-dom&#39;;\n//해당 컴포넌트에서 받는 data의 타입을 models 폴더에 정의(models 폴더에서 interface 타입 정의, 관리)\n//타입 정의를 models 폴더에 분리한 이유는 타입 정의한 것에 대해 한번에 파악하기 쉬워 관리하기 쉽고, 유지보수하기에도 편리하기 때문입니다.\nimport { Props } from &#39;models/Md_EnrollmentProductInfoNotice&#39;;\n//서버와 통신하는 로직을 util/service에 정의하고 해당 컴포넌트에서 import 했습니다.\n//많은 컴포넌트에서 서버와 통신하는 로직을 필요로하는 데 컴포넌트마다 로직을 작성하면 중복되고, 유지보수 하기 힘들기 때문에 util/service에 정의하여\n//재사용성과 유지보수를 해결했습니다.\nimport { enrollmentTemplate, getProductInfoNotiFormList, getToken } from &#39;util/service&#39;;\n//사용자가 Form에 입력한 값에 대한 유효성 검사하는 함수 import.\nimport { validateProductInfoTemplateFormInput } from &#39;util/templateValidation&#39;;\nimport config from &#39;../../env-config&#39;;\n//해당 컴포넌트에 필요한 모든 form 요소를 컴포넌트화 했습니다.\nimport AllForm from &#39;components/AllForm&#39;;\nimport CancleButton from &#39;components/CancleButton&#39;;\nimport ConfirmButton from &#39;components/ConfirmButton&#39;;\nimport &#39;styles/product_info_notice.scss&#39;;\nimport notice2 from &#39;images/ic-notice-red.png&#39;;\n\n//해당 컴포넌트에서 data를 받기 때문에 data의 타입을 불러와 React.FC&lt;Props&gt;로 타입을 정의했습니다.\n//React.FC&lt;RouteComponentProps&gt;는 해당 컴포넌트에서 withRouter 그리고 history를 사용하기 위해 타입을 정의했습니다.\n//해당 컴포넌트에서 props 대신에 {history, data}로 받은 이유는 어떤 매개변수를 받는지 한 눈에 파악할 수 있게 하기 위함입니다.\nconst EnrollmentProductInfoNoticeTemplate: React.FC&lt;Props &amp; RouteComponentProps&gt; = ({ history, data }) =&gt; {\n  //템플릿 네임, 변수명 그대로 템플릿 이름을 값으로 받는 변수입니다.\n  //초기 값을 빈 문자열로 준 이유는 해당 변수를 가지고 유효성 체크를 하는데, 이때 값의 길이가 존재해야하고, 타입이 string이기 때문입니다.\n  //빈 문자열을 주지 않으면 undefined로 문제가 발생합니다.\n  const [templateName, setTemplateName] = useState(&#39;&#39;);\n  //기본 템플릿, 해당 템플릿을 기본 템플릿으로 설정 하는지 안하는지를 값으로 받는 변수입니다.\n  //기본 값을 false로 줬습니다. 사용자가 체크해야 기본 템플릿으로 설정할 수 있게 하기 위해서 입니다.\n  const [isDefault, setIsDefault] = useState(false);\n  //상품군 목록이 존재합니다. 상품군 목록을 선택해야만 해당 상품군에 맞는 form들이 사용자에게 표시되기 때문에\n  //상품군을 선택하지 않으면 선택하라는 경고 텍스트를 보여주기 위한 변수입니다.\n  const [pleaseSelectProduct, setPleaseSelectProduct] = useState(false);\n  //상품군을 선택하면 상품군에 맞는 form data들을 받는 변수입니다.\n  //해당 변수는 AllFrom 컴포넌트에 prop으로 넘겨줍니다.\n  const [productFormList, setProductFormList] = useState();\n  //\n  //변수명을 dataJson으로 한 이유는 data의 타입이 object이고 이 데이터는 서버로부터 받은 상품군 리스트를 map을 돌리고\n  //Object.assign을 사용해 키와 값을 초기화합니다. Object.assign을 사용하기 위해 기본 값으로 빈 객체를 줬습니다.\n  const [dataJson, setDataJson] = useState({});\n  //AllForm 컴포넌트에서 사용자의 입력 값을 받아 최신화 된 데이터를 받는 변수입니다.\n  //가장 최신화 된 데이터를 받기 때문에 변수명을 getLastDataJson으로 했습니다.\n  const [getLastDataJson, lastDataJson] = useState();\n  //테플릿 이름의 최대 길이수를 30자로 정한 변수입니다.\n  //고정 값이고 재할당을 하지 않기 때문에 상수로 했습니다.\n  const TEMPLATENAMEMAXLENGTH = 30;\n\n  //사용자가 템플릿 이름을 작성할 때 발생하는 이벤트 핸들러입니다.\n  //onChange로부터 event를 받기 때문에 React.ChangeEvent 그리고 &lt;HTMLInputElement&gt; 타입을 정의했습니다.\n  //템플릿 이름의 길이가 30보다 작을 때는 입력한 값이 계속 반영되어야하고, 30와 같아지면 30까지 입력한 값이 반영되어야 하기 때문에\n  //if, else if로 분기처리 했습니다.\n  const templateNameContent = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    //사용자가 입력한 값의 길이가 30자 보다 작을 때 templateName 변수에 입력한 값을 계속 업데이트 해줍니다.\n    if (event.target.value.length &lt; TEMPLATENAMEMAXLENGTH) {\n      setTemplateName(event.target.value)\n    }\n    //반면 사용자가 입력한 값의 길이가 30자와 같아지면 templateName 변수에 최대 30자까지의 값만을 업데이트 해줍니다.\n    else if (event.target.value.length === TEMPLATENAMEMAXLENGTH) {\n      setTemplateName(event.target.value.slice(0, TEMPLATENAMEMAXLENGTH))\n    }\n  }\n\n  const toggleDefaultTemplate = () =&gt; {\n    setIsDefault(!isDefault);\n  }\n\n  //상품군 리스트를 클릭하면 발생하는 이벤트 핸들러입니다.\n  //핸들러 내부에 비동기 함수가 있어, 예상치 못한 오작동을 방지하기 위해 async await로 동기화 해줬습니다.\n  const selectProduct = async (event: React.ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; {\n    const productItemNumber = event.target.value;\n\n    //이 이벤트 핸들러 함수 안에서 서버와 통신하는 이유는 사용자가 상품군을 클릭했을 때 Form들을 보여줘야하기 때문에\n    //해당 이벤트 핸들러가 실행되면 서버와 통신하게끔 작성했습니다.\n    await getProductInfoNotiFormList(`${config.partnerAPI}/product-information-notices/form/${productItemNumber}`,\n      setProductFormList, getToken().jwt_token\n    )\n      .then((response) =&gt; {\n        if (response.status === 200) {\n          response.data.map((ele: any) =&gt; {\n            return setDataJson(\n              //서버로 보내야 하는 데이터의 타입이 객체이고\n              //Object.assign을 사용한 이유는 불변성을 유지하기 위해서 그리고 기존 객체에 새로운 키와 값을 추가 하기 위해서 입니다.\n              Object.assign(\n                dataJson,\n                {\n                  productInformationNoticeNumber: ele.productInformationNoticeNumber,\n                  [ele.fieldName]: null\n                })\n            )\n          })\n        }\n      })\n  }\n  //사용자가 입력한 값에 대한 이벤트 핸들러는 AllForm 컴포넌트에 존재합니다.\n  //AllForm 컴포넌트에서 dataJson가 업데이트 될 때마다 최신의 dataJson을 가지고 옵니다.\n  const getLastDataJsonForAllForm = (data: any) =&gt; {\n    lastDataJson(data)\n  }\n\n  const confirmButtonClick = () =&gt; {\n    //서버에 보낼 data를 Json 문자열로 변환합니다.\n    const data = JSON.stringify({\n      &quot;name&quot;: templateName,\n      &quot;isDefault&quot;: isDefault,\n      ...getLastDataJson\n    })\n    //if 조건문을 사용하여 사용자가 form에 입력을 제대로 했는지 확인하는 유효성 검사입니다.\n    //필수 입력 항목을 모두 입력했을 때 템플릿이 등록되어야 하기 때문에 이렇게 작성했습니다.\n    if (validateProductInfoTemplateFormInput(data)) {\n      const result = enrollmentTemplate(`${config.partnerAPI}/product-information-notice-templates`,\n        data, getToken().jwt_token\n      )\n      result.then((response) =&gt; {\n        if (response.status === 200) {\n          //정상적으로 등록이 완료되면 상품정보제공고시 템플릿을 관리하면 페이지로 이동합니다.\n          //실패했을 때 이동되면 안되기에 서버에서 주는 response의 상태 값을 체크하여 200일 때 이동되게 작성했습니다.\n          history.push(&#39;partner-templatemanagements-product-info-notice&#39;);\n        }\n      })\n    }\n  }\n\n  return (\n    &lt;&gt;\n      &lt;div className=&quot;product-info-notice-template&quot;&gt;\n        &lt;title&gt;상품정보제공고시 템플릿&lt;/title&gt;\n        &lt;div className=&quot;container&quot;&gt;\n          &lt;div className=&quot;flex&quot;&gt;\n            &lt;label htmlFor=&quot;template-name&quot; className=&quot;template-name&quot;&gt;\n              템플릿 이름\n            &lt;span className=&quot;required&quot;&gt;(필수)&lt;/span&gt;\n            &lt;/label&gt;\n            &lt;div className=&quot;table&quot;&gt;\n              &lt;input type=&quot;text&quot; id=&quot;template-name&quot;\n                value={templateName}\n                onChange={templateNameContent}\n              /&gt;\n              {\n                templateName.length ? null :\n                  (\n                    &lt;div className=&quot;notice2&quot;&gt;\n                      &lt;img src={notice2} alt=&quot;필수 입력 정보 경고 이미지&quot; /&gt;\n                      &lt;span&gt;\n                        필수 입력 정보입니다.\n                    &lt;/span&gt;\n                    &lt;/div&gt;\n                  )\n              }\n              &lt;div className=&quot;name-length-max&quot;&gt;{`${templateName.length}/${TEMPLATENAMEMAXLENGTH}`}&lt;/div&gt;\n              &lt;div className=&quot;flex&quot;&gt;\n                &lt;input type=&quot;checkbox&quot; id=&quot;default-template-select&quot; /&gt;\n                &lt;label htmlFor=&quot;default-template-select&quot; onClick={toggleDefaultTemplate}&gt;\n                  &lt;div className={isDefault ? &#39;checked&#39; : &#39;unchecked&#39;}&gt;\n                    기본 템플릿으로 저장\n                &lt;/div&gt;\n                &lt;/label&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;br /&gt;\n          &lt;div className=&quot;flex&quot;&gt;\n            &lt;label htmlFor=&quot;product-list&quot; className=&quot;product-list&quot;&gt;\n              상품군\n            &lt;span className=&quot;required&quot;&gt;(필수)&lt;/span&gt;\n            &lt;/label&gt;\n            &lt;div className=&quot;table&quot;&gt;\n              &lt;select id=&quot;product-list&quot; onChange={selectProduct}&gt;\n                &lt;option&gt;상품군을 선택해주세요.&lt;/option&gt;\n                {\n                  data ? data.map((ele) =&gt; {\n                    return &lt;option key={ele.number} data-id={ele.number} value={ele.number}&gt;{ele.title}&lt;/option&gt;\n                  }) : null\n                }\n              &lt;/select&gt;\n              {\n                pleaseSelectProduct ?\n                  (\n                    &lt;div className=&quot;notice2&quot;&gt;\n                      &lt;img src={notice2} alt=&quot;필수 입력 정보 경고 이미지&quot; /&gt;\n                      &lt;span&gt;\n                        상품군을 꼭 선택해주세요.\n                      &lt;/span&gt;\n                    &lt;/div&gt;\n                  ) :\n                  &#39;&#39;\n              }\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;br /&gt;\n          //특정 상품군에 맞는 Form들을 화면에 보여주기 위해 필요한 컴포넌트입니다.\n          //컴포넌트에 필요한 state들을 prop으로 넘겨줍니다.\n          //이렇게 작성한 이유는 state들을 해당 컴포넌트에서 유지 및 관리하는데 AllForm 컴포넌트에서도 필요하기 때문입니다.\n          &lt;AllForm\n            templateName={templateName}\n            isDefault={isDefault}\n            productFormList={productFormList}\n            dataJson={dataJson}\n            getLastDataJson={getLastDataJsonForAllForm}\n          /&gt;\n          &lt;div className=&quot;button-box&quot;&gt;\n            &lt;Link to=&quot;/partner-templatemanagements-product-info-notice&quot;&gt;\n              &lt;CancleButton /&gt;\n            &lt;/Link&gt;\n            &lt;ConfirmButton\n              confirmClick={confirmButtonClick}\n            /&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n//EnrollmentProductInfoNoticeTemplate 컴포넌트에 props로 history를 넘겨주기 위해 withRouter를 사용했습니다.\n//다른 컴포넌트로부터 porps로 history를 받을 수 있다고해도, withRouter로 직관적으로 사용하는게 유지보수 측면이나 가독성 측면에서 좋다고 생각합니다.\nexport default withRouter(EnrollmentProductInfoNoticeTemplate);</code></pre></div>","fields":{"slug":"/posts/project-code","tagSlugs":["/tag/code/"]},"frontmatter":{"date":"2020-01-22","description":"프로젝트 코드 설명 글 작성","tags":["CODE"],"title":"프로젝트 소스 코드"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/project-code"}}}