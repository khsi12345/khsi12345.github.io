{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react_and_vue","webpackCompilationHash":"87d398373257bd0ceaab","result":{"data":{"markdownRemark":{"id":"be0f6fa8-89a1-586f-a620-82bb9e4503a4","html":"<h3 id=\"react와-vue-이-둘은-data를-어떻게-변경할까\"><a href=\"#react%EC%99%80-vue-%EC%9D%B4-%EB%91%98%EC%9D%80-data%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%80%EA%B2%BD%ED%95%A0%EA%B9%8C\" aria-label=\"react와 vue 이 둘은 data를 어떻게 변경할까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react와 vue 이 둘은 data를 어떻게 변경할까?</h3>\n<p>react는 state 객체를 만들고 데이터를 변경하기위한 별도의 작업(state를 조작하기 위한)을 수행하고, vue는 data 객체를 생성한 후에 data를 자유롭게 변경할 수 있다.</p>\n<p>react</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'seongho'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>vue</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'seongho'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>name을 변경해보자.<br>\nreact에서는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"react lover\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 직접적으로 변경하면 안된다.<br>\n직접적으로 변경하면 react 내부적으로 state(name data)가 변경 될때마다 변경 감지를 유지해야하고 라이프사이클 실행 등을 위해 더 많은 작업을 하게 된다.<br>\n따라서 state를 변경하기 위해 존재하는 setState() 함수를 이용해서 변경해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> 'react lover<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>반면 vue에서는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"vue lover\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 변경할 수 있다.<br>\nvue에서는 이처럼 변경하면 setState()를 내부적으로 결합해준다.</p>\n<h3 id=\"todo-list-생성해보기\"><a href=\"#todo-list-%EC%83%9D%EC%84%B1%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"todo list 생성해보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ToDo List 생성해보기</h3>\n<h5 id=\"react\"><a href=\"#react\" aria-label=\"react permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react</h5>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>”text”<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{this.state.todo}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{this.handleInput}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">createNewToDoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> list<span class=\"token punctuation\">,</span> todo <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      …list<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n      todo\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    todo<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">handleInput</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        todo<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>handleInput 함수를 input 요소의 onChange에 바인딩했습니다.<br>\n즉, input 요소에서 onChange 이벤트가 발생할때마다 handleInput 함수가 실행됩니다.<br>\n이때도 <code class=\"language-text\">this.state.todo = e.target.value;</code>가 아닌 this.setState()를 사용하여 state(data)를 변경했습니다.</p>\n<p>새로운 ToDo를 List에 추가할때도 this.setState()를 사용하여 state(data)를 변경했습니다.</p>\n<p>이는 단방향의 데이터 바인딩입니다.<br>\n즉 js를 이용해서 데이터를 변경하고 화면에 렌더링하는 구조입니다.</p>\n<h5 id=\"vue\"><a href=\"#vue\" aria-label=\"vue permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vue</h5>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>”text”<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>”todo”<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createNewToDoItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todo\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todo <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>vue는 input에서 v-model을 호출하여 todo와 바인딩합니다.<br>\nv-model은 react와는 다른 양방향 데이터 바인딩인데, js를 이용해서 데이터를 변경할 수 있고, 화면에서 input의 값을 바꿈으로 js의 data도 같이 변경됩니다.<br>\n따라서 handleInput 함수를 구현하지 않아도 됩니다.</p>\n<p>새로운 ToDo를 List에 추가할때도 list에 직접 접근하여 array 메소드인 push를 사용해 직접적으로 배열을 변경합니다.</p>\n<h3 id=\"react와-vue의-공통점\"><a href=\"#react%EC%99%80-vue%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%90\" aria-label=\"react와 vue의 공통점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react와 vue의 공통점</h3>\n<p>자바스크립트 라이브러리이며, SPA이다.<br>\n가상 DOM을 활용한다.<br>\n반응적이고 조합 가능한 컴포넌틀르 제공한다.<br>\n코어 라이브러리(view)에만 집중하고 있고 라우팅 및 전역 상태를 관리는 별도의 라이브러리를 사용한다.</p>\n<p>UI를 렌더링 할 때 DOM을 조작하는 것이 가장 비용이 많이 드는 작업이고 아쉽게도 필요한 DOM 조작 수를 최소화함으로서 렌더링 성능을 끌어올립니다.</p>\n<p>상태가 없고 인스턴스가 없는 컴포넌트를 제공하므로 오버 헤드가 적다.</p>\n<h3 id=\"react와-vue의-차이점\"><a href=\"#react%EC%99%80-vue%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"react와 vue의 차이점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react와 vue의 차이점</h3>\n<p>자바스크립트의 오버헤드는 필요한 DOM 작업을 계산하는 메커니즘과 직접적으로 관련되어 있다.<br>\nreact와 vue는 가상 DOM을 사용하지만 vue의 가상 DOM 구현은 훨씬 가벼워 react보다 더 적은 오버 헤드가 발생합니다.</p>\n<p>react에서는 컴포넌트의 상태가 변경되면 해당 컴포넌트에서 시작하여 하위에 있는 모든 컴포넌트를 다시 렌더링한다.<br>\n불피요한 자식 컴포넌트의 재렌더링을 피하려면 자식 컴포넌트에서 shouldComponentUpdate를 구현하고 변경 불가능한 데이터 구조를 사용해야 한다.<br>\nvue에서 컴포넌트의 종속성은 렌더링 주우 자동으로 추적되므로 시스템은 실제도 다시 렌더링해야하는 컴포넌트를 정확히 알고있다.<br>\n즉, 최적화되지 않은 vue의 업데이트는 최적화되지 않은 react보다 빠르며 실제로 vue의 렌더링 성능이 향상되므로 완전히 최적화된 react도 보통 vue가 기본 제공되는 것보다 느리다.</p>\n<p>react에서는 모든 것이 자바스크립트이다.<br>\nJSX를 통해서 HTML 구조를 만들 뿐만 아니라 CSS 관리도 자바스크립트에서 하는 추세다.<br>\n반면 vue는 고전적인 웹기술들을 받아들였습니다.<br>\nreact에서 모든 컴포넌트는 JSX를 사용하는 렌더링 함수를 통해서 UI를 표현한다.<br>\nJSX는 자바스크립트에서 작동하는 선언적인 XML 유사 문법이다.<br>\nJSX를 사용하는 렌더링 함수의 장점은 변수, 흐름 제어, 스코프 내에서 자바스크립트의 값을 가져다 쓸 수 있는 등등.<br>\nvue에서도 렌디렁 함수에 JSX를 쓸 수 있다.<br>\n하지만 기본적으로는 템플릿을 사용한다.<br>\n템플릿을 사용하는 장점은 HTML 기반 템플릿을 이용하면 기존 어플리케이션을 vue로 점진적으로 이전하기 쉽다.<br>\n템플릿 문법을 써서 개발자들이 더 적은 코드로 더 많은 것을 처리할 수 있다.(@on, @click, @change 등)<br>\nJSX나 렌더링 함수를 쓰면 같은 일을 처리하기 위해 더 많은 코드를 써야 한다.</p>","fields":{"slug":"/posts/react_and_vue","tagSlugs":["/tag/react/","/tag/vue/"]},"frontmatter":{"date":"2019-11-16","description":"react 그리고 vue에 대한 글 ","tags":["react","vue"],"title":"react 그리고 vue(너와 나)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react_and_vue"}}}